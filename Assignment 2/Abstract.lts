// Julien Bastin 8103-1400
// Nicolas Vanvyve 6590-1300

const N = 3
range Node_ids = 0..N-1

set Messages = {token, claim[Node_ids]}

NODE(I=0) 	= 	IDLE,
IDLE 		= 	(rcv.token -> LEADER
				| snd.claim[I] -> ELIGIBLE
				| rcv.claim[j:Node_ids] ->
					if (j < I) then (snd.claim[j] -> IDLE)
					else IDLE),
LEADER 		= 	(open->close->snd.token->IDLE
				| snd.token->IDLE),
ELIGIBLE	=	(snd.claim[I] -> ELIGIBLE
				| rcv.claim[I] -> LEADER
				| rcv.claim[j:Node_ids] ->
					if (j<I) then (snd.claim[j] -> IDLE)
					else ELIGIBLE
				| rcv.token -> LEADER) + {snd.claim[Node_ids]}.

CHANNEL	= (token.snd -> token.rcv -> CHANNEL | claim.snd[i:Node_ids] -> claim.rcv[i] -> CHANNEL).


||ELECTIONRING = ([j:Node_ids]:NODE(j) || [i:Node_ids]:CHANNEL)
		 		/  {[i:Node_ids].snd.claim[j:Node_ids]/[i].claim.snd[j],
					[i:Node_ids].rcv.claim[j:Node_ids]/[(i+N-1)%N].claim.rcv[j],
					[i:Node_ids].snd.token/[i].token.snd,
					[i:Node_ids].rcv.token/[(i+N-1)%N].token.rcv}.

||ELECTIONSERVICE = ELECTIONRING
@{node[Node_ids].{open,close}}.

minimal ||ABSTRACT0 = ELECTIONRING.
minimal ||ABSTRACT1 = ABSTRACT0 \ {[i:Node_ids].snd.claim[j:Node_ids]}.
minimal ||ABSTRACT2 = ABSTRACT1 \ {[i:Node_ids].rcv.claim[j:Node_ids]}.
minimal ||ABSTRACT3 = ABSTRACT2 \ {[i:Node_ids].rcv.token}.
minimal ||ABSTRACT4 = ABSTRACT3 \ {[i:Node_ids].snd.token}.
